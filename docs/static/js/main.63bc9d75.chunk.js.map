{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OAEI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEFJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAMd,SAEI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAElC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAKgB,IAAMN,IACtB,4BACKA,QCHJO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAGrB,ECLwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAXAC,qBAAW,WAELxB,EAASC,GAAUwB,MAAM,SAAAC,GACrBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAIrB,CAAEpB,IAEGqB,EDZuBK,CAAa1B,GAA/Ba,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QASpB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OAEE,sBAAKgB,UAAU,YAAf,UAEGI,GAAW,mBAAGJ,UAAU,mCAAb,qBAEXH,EAAOJ,KAAK,SAAAC,GAAG,OACR,cAAC,EAAD,eAEIA,GADIA,EAAIC,cEvBvBgB,EAAe,WAIxB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAIA,OACI,gCACQ,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OAGhB,cAAC,EAAD,CAA2BA,SAAWA,GAAtBA,Y,MCjBhD6B,IAASC,OAEL,cAAC,EAAD,IAEAC,SAASC,eAAe,W","file":"static/js/main.63bc9d75.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //console.log('submit hecho');\r\n    if( inputValue.trim().length > 2){\r\n        setCategories(cats => [inputValue,...cats]);\r\n        setInputValue('');\r\n    }\r\n        \r\n    }\r\n    return (        \r\n\r\n        <form onSubmit={handleSubmit}>\r\n            \r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange}  >\r\n                  \r\n            </input>\r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async( category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category) }&limit=12&api_key=vMIo0ShIIGIlmICWa4zI1Tx6W2vnfhO8`;\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    //console.log(gifs);\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url} ) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url} alt={ title}></img>\r\n            <p>\r\n                {title}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    \r\n    const {data:images, loading} =useFetchGifs(category);\r\n    //console.log(loading);\r\n    //console.log(data);\r\n    //const [count, setcount] = useState(0);\r\n\r\n\r\n     \r\n    //getGifs();\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\r\n            \r\n            { <div className=\"card-grid\">\r\n            \r\n                {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n                {\r\n                 images.map( img => (\r\n                        <GifGridItem \r\n                        key = { img.id}\r\n                        {...img}\r\n                        />\r\n                        \r\n                    ))\r\n                }\r\n                \r\n            \r\n            </div> }\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) =>\r\n{\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    useEffect( () => {\r\n\r\n          getGifs( category).then( imgs => {\r\n              setstate({\r\n                  data: imgs,\r\n                  loading: false\r\n              });\r\n          })\r\n     ;\r\n    },[ category ])\r\n   \r\n    return state;\r\n\r\n\r\n\r\n}","import React, { useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    \r\n    const [categories, setCategories] = useState(['One punch']);\r\n    // const handleAdd = () => {\r\n    //     setCategories([...categories, 'hunterXHunter']);\r\n    // }\r\n    return (\r\n        <div>\r\n                <h2>GifExpertApp</h2>\r\n                <AddCategory setCategories={ setCategories }/>\r\n                <hr />\r\n                \r\n                <ol>    \r\n                    {\r\n                        categories.map( category =>\r\n                            (\r\n                                \r\n                                <GifGrid key = {category}  category={ category } />\r\n                            ))\r\n                        }\r\n                </ol>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n    document.getElementById('root')\n);\n\n//GifExpertApp\n"],"sourceRoot":""}